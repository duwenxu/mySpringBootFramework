SpringDataJpa Specification接口用法  (复杂/动态查询)

Criteria查询基本概念
Criteria 查询是以元模型的概念为基础的，元模型是为具体持久化单元的受管实体定义的，这些实体可以是实体类，嵌入类或者映射的父类。

CriteriaQuery接口：代表一个specific的顶层查询对象，它包含着查询的各个部分，比如：select 、from、where、group by、order by等注意：CriteriaQuery对象只对实体类型或嵌入式类型的Criteria查询起作用
Root接口：代表Criteria查询的根对象，Criteria查询的查询根定义了实体类型，能为将来导航获得想要的结果，它与SQL查询中的FROM子句类似  (相当于获取传入的实体类中的对应字段作为查询条件)

1：Root实例是类型化的，且定义了查询的FROM子句中能够出现的类型。root代表查询的实体类,query可以从中得到root对象,告诉jpa查询哪一个实体类,还可以添加查询条件,还可以结合EntityManager对象 得到最终查询的 TypedQuery对象.
2：查询根实例能通过传入一个实体类型给 AbstractQuery.from方法获得。
3：Criteria查询，可以有多个查询根。 
4.CriteriaBuilder接口：用来构建CritiaQuery的构建器对象Predicate(Predicate:查询的每一个部分)：一个简单或复杂的谓词类型，其实就相当于条件或者是条件组合，CriteriaBuilder语句会得到一个Predicate对象

代码示例：
使用lambda表达式的形式得到Specification对象进行查询

    fun dupPageTitle(title: String, userId: Int, taskId: Int, terminalId: Int, groupId: Int?, id: Int?): Boolean {
        val spec = Specification<PageHead> { root, query, criteriaBuilder ->
            val list = ArrayList<Predicate>()
            val groupCondition = if (groupId == null) {
                criteriaBuilder.isNull(root.get<Int>("groupId"))
            } else {
                criteriaBuilder.equal(root.get<Int>("groupId"), groupId)
            }
            list.add(groupCondition)
            list.add(criteriaBuilder.equal(root.get<String>("title"), title))
            list.add(criteriaBuilder.equal(root.get<Int>("userId"), userId))
            list.add(criteriaBuilder.equal(root.get<Int>("taskId"), taskId))
            list.add(criteriaBuilder.equal(root.get<Int>("terminalId"), terminalId))
            if (id != null) {
                list.add(criteriaBuilder.notEqual(root.get<Int>("id"), id))
            }
            val predicate = criteriaBuilder.and(*list.toTypedArray())

            query.where(predicate)
            query.restriction
        }
        return pageHeadReposity.findAll(spec).isNotEmpty()
    }

       /**
        * 动态条件查询
        */
       private fun findAllUser(userName: String?, levelId: Int?, taskId: Int, orgName: String?, pageStart: Int, pageLength: Int): Page<UserTask> {
           val sort = Sort(Sort.Direction.DESC, "userName")
           val spec = Specification<UserTask> { root, query, criteriaBuilder ->
               val predicates = ArrayList<Predicate>()
               predicates.add(criteriaBuilder.equal(root.get<Int>("taskId"), taskId))
               if (levelId != null) {
                   predicates.add(criteriaBuilder.equal(root.get<Int>("levelId"), levelId))
               }
               if (userName != null && userName != "") {
                   predicates.add(criteriaBuilder.like(root.get<String>("userName"), "%$userName%"))
               }
               if (orgName != null && orgName != "") {
                   predicates.add(criteriaBuilder.like(root.get<String>("orgName"), "%$orgName%"))
               }
               val predicate = criteriaBuilder.and(*predicates.toTypedArray())
               query.where(predicate)
               query.restriction
           }
           return userTaskRepository.findAll(spec, PageRequest.of(pageStart, pageLength, sort))
       }