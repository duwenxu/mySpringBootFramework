1. UML类图中的关系：
        泛化关系(generalization):表现为 继承非抽象类    is a的关系
                                类的继承结构表现在UML中为：泛化(generalize)与实现(realize)
        实现关系(realize)：表现为 继承抽象类或实现接口
        聚合关系（aggregation）：表示 实体对象之间的关系，整体由部分构成    整体不存在了，部分依然存在(非强依赖)
        组合关系（composition）: 表示 实体对象之间的关系，整体由部分构成    整体不存在了，则部分也不存在(强依赖关系)
        关联关系（association）: 不同对象之间的一种静态关系，通常表现为 成员变量的形式
        依赖关系（dependency）: 表示一个对象在 运行期间 会用到另一个对象的关系
                               1.是一种临时性的关系    2.代码中表现为 类构造或其它方法的传入参数
2. 创建型模式：
        1. 简单工厂模式（静态工厂）：属于 类创建型模式
               a.角色     Factory：工厂角色                 工厂角色负责实现创建所有实例的内部逻辑
                          Product：抽象产品角色             抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口
                          ConcreteProduct：具体产品角色     具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例
               b.要点     当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节
               c.优点     对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责
                 缺点     工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂
               d.使用场景   工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心
        2. 工厂方法模式（工厂模式、虚拟其构造模式、多态工厂）：属于 类创建型模式
                a.角色    Product：抽象产品
                          ConcreteProduct：具体产品
                          Factory：抽象工厂                  定义创建产品对象的公共接口   将具体的产品类实例化操作延迟到工厂子类中完成
                          ConcreteFactory：具体工厂          负责生成具体的产品对象
                b.要点     在简单工厂模式的基础上对工厂类进行了多态化，所有的具体工厂类都需要实现具体工厂类。
                           工厂角色和产品角色的多态性设计是工厂方法模式的关键
                c.优点     相比于简单工厂模式，加入新产品时只需要添加一个具体工厂和相对应的具体产品即可，而无需修改已有类。
                  缺点     添加新产品时，类的数量成对增加，一定程度上增加了系统的复杂性
                d.使用场景  将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定
        3.抽象工厂模式：（所有形式的工厂模式中最为抽象和最具一般性的一种形态）属于 对象创建型模式
                a.角色      Product：抽象产品                 为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法
                           ConcreteProduct：具体产品          定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法
                           Factory：抽象工厂                  声明生成抽象产品的方法
                           ConcreteFactory：具体工厂          实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中
                b.要点     相比于工厂模式，增加了多个产品等级结构。
                           抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构
                                   产品等级结构：产品的继承结构    比如：抽象产品类---->具体产品类
                                   产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品
                c.优点      每次可以通过具体工厂类创建一个产品族中的多个对象，增加新的具体工厂和产品族很方便
                  缺点      增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性
                d.使用场景： 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族
                            属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现
